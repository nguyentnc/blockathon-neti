/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CreateTour {
  export type TourInfoStruct = {
    startTime: BigNumberish;
    endTimeRegister: BigNumberish;
    priceTour: BigNumberish;
    guaranteeFee: BigNumberish;
    limitClient: BigNumberish;
    status: boolean;
    tourGuide: AddressLike;
  };

  export type TourInfoStructOutput = [
    startTime: bigint,
    endTimeRegister: bigint,
    priceTour: bigint,
    guaranteeFee: bigint,
    limitClient: bigint,
    status: boolean,
    tourGuide: string
  ] & {
    startTime: bigint;
    endTimeRegister: bigint;
    priceTour: bigint;
    guaranteeFee: bigint;
    limitClient: bigint;
    status: boolean;
    tourGuide: string;
  };
}

export interface CreateTourInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blackList"
      | "burn"
      | "cancelTour"
      | "checkAttendence"
      | "checkInfo"
      | "checkIsRegistered"
      | "checkNumberParticipants"
      | "checkProtocolFee"
      | "claimGuaranteeFee"
      | "claimWhenCancel"
      | "createTour"
      | "decimals"
      | "emergencyWithdraw"
      | "estimateFee"
      | "issuer"
      | "minFee"
      | "name"
      | "owner"
      | "registerTour"
      | "setBlackList"
      | "setFee"
      | "setProtocolFee"
      | "setToken"
      | "supportsInterface"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Fee"
      | "FeeUpdated"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blackList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cancelTour",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAttendence",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIsRegistered",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkNumberParticipants",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimGuaranteeFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWhenCancel",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTour",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(functionFragment: "minFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerTour",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlackList",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blackList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelTour", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkAttendence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkIsRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNumberParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGuaranteeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWhenCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTour", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerTour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    issuer: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    issuer: string,
    value: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    issuer: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CreateTour extends BaseContract {
  connect(runner?: ContractRunner | null): CreateTour;
  waitForDeployment(): Promise<this>;

  interface: CreateTourInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  blackList: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;

  cancelTour: TypedContractMethod<[id: BytesLike], [void], "nonpayable">;

  checkAttendence: TypedContractMethod<
    [id: BytesLike, participants: AddressLike[]],
    [void],
    "nonpayable"
  >;

  checkInfo: TypedContractMethod<
    [id: BytesLike],
    [CreateTour.TourInfoStructOutput],
    "view"
  >;

  checkIsRegistered: TypedContractMethod<
    [id: BytesLike, user: AddressLike],
    [boolean],
    "view"
  >;

  checkNumberParticipants: TypedContractMethod<
    [id: BytesLike],
    [bigint],
    "view"
  >;

  checkProtocolFee: TypedContractMethod<[], [bigint], "view">;

  claimGuaranteeFee: TypedContractMethod<[id: BytesLike], [void], "nonpayable">;

  claimWhenCancel: TypedContractMethod<[id: BytesLike], [void], "nonpayable">;

  createTour: TypedContractMethod<
    [
      id: BytesLike,
      endTimeRegister: BigNumberish,
      priceTour: BigNumberish,
      guaranteeFee: BigNumberish,
      limitClient: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<
    [_amounts: BigNumberish[], _tokens: AddressLike[]],
    [void],
    "payable"
  >;

  estimateFee: TypedContractMethod<[value: BigNumberish], [bigint], "view">;

  issuer: TypedContractMethod<[], [string], "view">;

  minFee: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerTour: TypedContractMethod<[id: BytesLike], [void], "nonpayable">;

  setBlackList: TypedContractMethod<
    [id: BytesLike, status: boolean],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  setProtocolFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setToken: TypedContractMethod<[newToken: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blackList"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelTour"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkAttendence"
  ): TypedContractMethod<
    [id: BytesLike, participants: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkInfo"
  ): TypedContractMethod<
    [id: BytesLike],
    [CreateTour.TourInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkIsRegistered"
  ): TypedContractMethod<[id: BytesLike, user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkNumberParticipants"
  ): TypedContractMethod<[id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkProtocolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimGuaranteeFee"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimWhenCancel"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTour"
  ): TypedContractMethod<
    [
      id: BytesLike,
      endTimeRegister: BigNumberish,
      priceTour: BigNumberish,
      guaranteeFee: BigNumberish,
      limitClient: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [_amounts: BigNumberish[], _tokens: AddressLike[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "estimateFee"
  ): TypedContractMethod<[value: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "issuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerTour"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBlackList"
  ): TypedContractMethod<
    [id: BytesLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setToken"
  ): TypedContractMethod<[newToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Fee"
  ): TypedContractEvent<
    FeeEvent.InputTuple,
    FeeEvent.OutputTuple,
    FeeEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Fee(address,address,address,uint256)": TypedContractEvent<
      FeeEvent.InputTuple,
      FeeEvent.OutputTuple,
      FeeEvent.OutputObject
    >;
    Fee: TypedContractEvent<
      FeeEvent.InputTuple,
      FeeEvent.OutputTuple,
      FeeEvent.OutputObject
    >;

    "FeeUpdated(uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
