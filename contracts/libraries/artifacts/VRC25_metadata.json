{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Fee",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "FeeUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "estimateFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "issuer",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "setFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"acceptOwnership()": {
					"details": "Accept the ownership transfer. This is to make sure that the contract is transferred to a working address Can only be called by the newly transfered owner."
				},
				"balanceOf(address)": {
					"params": {
						"owner": "The address to query the balance of."
					},
					"returns": {
						"_0": "An uint256 representing the amount owned by the passed address."
					}
				},
				"minFee()": {
					"details": "The amount fee that will be lost when transferring."
				},
				"supportsInterface(bytes4)": {
					"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "Base VRC25 implementation",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Approval(address,address,uint256)": {
					"notice": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"Fee(address,address,address,uint256)": {
					"notice": "Emitted when token is transferred"
				},
				"Transfer(address,address,uint256)": {
					"notice": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				}
			},
			"kind": "user",
			"methods": {
				"allowance(address,address)": {
					"notice": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
				},
				"approve(address,uint256)": {
					"notice": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
				},
				"balanceOf(address)": {
					"notice": "Returns the amount of tokens owned by `account`."
				},
				"burn(uint256)": {
					"notice": "Remove `amount` tokens owned by caller from circulation."
				},
				"decimals()": {
					"notice": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`)."
				},
				"estimateFee(uint256)": {
					"notice": "Calculate fee needed to transfer `amount` of tokens."
				},
				"issuer()": {
					"notice": "Owner of the token"
				},
				"name()": {
					"notice": "Name of token"
				},
				"owner()": {
					"notice": "Owner of the token"
				},
				"setFee(uint256)": {
					"notice": "Set minimum fee for each transaction Can only be called by the current owner."
				},
				"symbol()": {
					"notice": "Symbol of token"
				},
				"totalSupply()": {
					"notice": "Returns the amount of tokens in existence."
				},
				"transfer(address,uint256)": {
					"notice": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
				},
				"transferFrom(address,address,uint256)": {
					"notice": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
				}
			},
			"notice": "VRC25 implementation for opt-in to gas sponsor program. This replace Ownable from OpenZeppelin as well.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"libraries/VRC25.sol": "VRC25"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"interfaces/IERC165.sol": {
			"keccak256": "0xc9c0103a859f853382d7b52d4ec6627afeb165897ae53ca21427403285f13243",
			"license": "MIT",
			"urls": [
				"bzz-raw://86195ba1da631af5d95f57d8390d9cb97eaf36698c4dacbd9e82c3cc83f6278b",
				"dweb:/ipfs/QmSM2Yu9kb9jnRBXL4YrQHTshJ58gB1zXGyeY1X3Gkak34"
			]
		},
		"interfaces/IVRC25.sol": {
			"keccak256": "0xe02767e22d3647955d623a1b077c7b90db818a056bfa2062354c9a6d5299ff92",
			"license": "MIT",
			"urls": [
				"bzz-raw://27c67191babf964f6739f813c06dc720876c7c1d456e836b6d17918796dd8580",
				"dweb:/ipfs/Qmdut9CdSExkDKd5H73StBiKHvs795YhV2ukj1iUVUoST9"
			]
		},
		"libraries/Address.sol": {
			"keccak256": "0x9998823550df9ee0edd70247791447461bb840c339a7ebca72d97e0c979414ab",
			"license": "MIT",
			"urls": [
				"bzz-raw://991b9b70ce828f7c5decaa9613ffa27db8cab98f81cc73ad80f9d4765615c738",
				"dweb:/ipfs/QmXo8EMtMKSVRe58BaL49RQg7w2Goib792J27a6ishhqc6"
			]
		},
		"libraries/SafeMath.sol": {
			"keccak256": "0x40ad6c112b95aaf42373fdf9c7f3be0839914c91b9cd49566455429c1d564616",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc8750cf078d5e1dd576a8977efefcd01dd2f3e5e08d713886ac29ec128f9c27",
				"dweb:/ipfs/QmSRRiBUKaRuYwMZ4msbTTKbaJsM3emEk6FNK1JmCwraiM"
			]
		},
		"libraries/VRC25.sol": {
			"keccak256": "0xda90c43d247a28e7ffa035ed6186a97197630e8919a2a9b2e2e88bfc2bd60f3e",
			"license": "MIT",
			"urls": [
				"bzz-raw://2620aa802e4b49e7c63dfad1c5d6bbb36f7091ff2a633417fdc87872ec733e5b",
				"dweb:/ipfs/Qmduzp2e9wrWrYFVcQ5knkPA3mohoKBpvAiHzhE1a1fzJ3"
			]
		}
	},
	"version": 1
}